name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Get version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        BINARY_NAME=glitch_deps
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi

        go mod tidy
        
        # Get build information
        VERSION=${{ steps.version.outputs.VERSION }}
        GIT_COMMIT=$(git rev-parse --short HEAD)
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # Build with version information embedded
        go build -ldflags="-s -w -X main.Version=${VERSION} -X main.GitCommit=${GIT_COMMIT} -X main.BuildDate=${BUILD_DATE}" -o ${BINARY_NAME} main.go
        
        if [ "$GOOS" = "windows" ]; then
          zip glitch_deps_${{ steps.version.outputs.VERSION }}_${GOOS}_${GOARCH}.zip ${BINARY_NAME}
        else
          tar -czf glitch_deps_${{ steps.version.outputs.VERSION }}_${GOOS}_${GOARCH}.tar.gz ${BINARY_NAME}
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: glitch_deps_${{ steps.version.outputs.VERSION }}_${{ matrix.goos }}_${{ matrix.goarch }}
        path: glitch_deps_${{ steps.version.outputs.VERSION }}_${{ matrix.goos }}_${{ matrix.goarch }}.*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Get version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          */glitch_deps_${{ steps.version.outputs.VERSION }}_*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
